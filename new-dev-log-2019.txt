spent 1:30 figuring out that I never selected EC2 as the trusted source when originally creating my role and frigged around with users, groups and other things including installing the aws cli. I now know a little more about access and IAM roles, groups and users. 

Now finding out I have a to have a codedeploy role and a ec2 role. OKay!

Deployments are failing due to: The overall deployment failed because 
1. too many individual instances failed deployment, 
2. too few healthy instances are available for deployment,
or 3. some instances in your deployment group are experiencing problems.

Makes me think that this is because I don't have a load balancer. I want to create a load balancer but have to set up a certificate for that to happen. ACM manager time. 
Had to use a classic load balancer because I had to mess around with godaddy DNS to get a ACM certificate which is needed for a non classic load balancer.
Got the load balancer working.
The code deploy is failing because of instance health. 

01/03/2019 Thursday 6:30pm
  - Overall goal is to have all my websites hosted on aws
    - Where we left off last night was that I finally got the roles, users, and groups set in IAM as well as in EC2 & CodeDeploy  
    - The deploy is failing because of instance health.
      - "To resolve the issue, review and correct any errors in the the health check configuration for the load balancer."
      - It seems that it is failing when it gets to the blockTraffic step, which makes me think that the load balancer is to blame
    --- The issue is that it might be that codedeployagent is not installed on my instance, which would make sense.
      - Time to install putty
      - I have changed the EC2 keys to ppk format to use with putty and am about to start a session
      - We are connected! Now I need to install codedeploy agent on the instance using this guide (https://docs.aws.amazon.com/codedeploy/latest/userguide/codedeploy-agent-operations-install-linux.html). Done!
    - The deployment got to download bundle and succeeded, but now is throwing an error about an appspec (http://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file.html)
      - Created and committed an appspec.yml copied from here (https://docs.aws.amazon.com/codedeploy/latest/userguide/reference-appspec-file-example.html)
      - Thought I was smart and changed the version to 0.1 and got this error (The deployment failed because an invalid version value (0.1) was entered in the application specification file. Make sure your AppSpec file specifies "0.0" as the version, and then try again :p)
      - Atleast I get a chance to change the load balancer timeouts which currently takes... 30 seconds nvm or so I thought. Something takes 5 minutes for block traffic to resolve. I have to change the healthy threshold from 10 to 2
        === Leaving off here, having to edit my appspec.yml to run npm build and npm start (https://hub.packtpub.com/deploy-nodejs-apps-aws-code-deploy/)
  - Next goal will be to delete root access permissions and update the healfly app with s3 only ones. (Hopefully before I push this!)
    --- Worked with relative ease, added s3fullaccess to user, group, role and to a custom policy. 
01/04/2019 8:00pm
  - Again overall goal is to have all my websites hosted on AWS and then if I have time figure out what lambda is about
  - But first I must do my weekly timesheets!
  8:25pm 
      - About to dig into how to create an appspec.yml. I know that I want the server to run npm install, (install npm as well), npm build and then npm start when called. 
        - Installed node & npm v 4.4.5 on my EC2 Instance using this guide (https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html)
        - Copied the appspec.yml and scripts folder (but added npm build after npm install) into my app from (https://github.com/brettstack/node-starter)
          - We get to afterInstall and failed with this message(  npm: command not found. )
            - Found out that node and npm are installed at /home/ec2-user/.nvm/versions/node/v4.4.5/bin/npm . Using the commands found in this article to shift the link to ... Not sure where I should link it to or where I should install npm to. 
              - I didn't install it globally because I didn't use sudo, which would have installed it globally. Wouldn't have minded doing that but now I see this article and realize that it could lead to errors down the road (https://givan.se/do-not-sudo-npm/)
              - Packages can run arbitrary scripts, which makes sudoing a package manager command as safe as a chainsaw haircut. â€“ @izs, npm core
              - Apparently this was a good thing and now I just have to install with nvm in the correct directory, which to me looks like either /usr/bin/node or /usr/local/bin/npm.
                - I have time tonight to try both. So I will and maybe I'll break it but OKay!
                - Running these 4 commands (sudo ln -s /home/ec2-user/.nvm/versions/node/v4.4.5/bin/node /usr/bin/node
                  sudo ln -s /home/ec2-user/.nvm/versions/node/v4.4.5/lib/node /usr/bin/node
                  sudo ln -s /home/ec2-user/.nvm/versions/node/v4.4.5/bin/npm /usr/bin/npm
                  sudo ln -s /home/ec2-user/.nvm/versions/node/v4.4.5/bin/node-waf /usr/bin/node-waf)
                - It seems to be failing at the after install again. I'm now suspicious of the #!/bin/bash   cd /var/api  part if npm works... Isn;t failing on time so I won't know until next time.. Time to ponder what I could have done wrong.. 
              - NPM Works now!!! But now my script timed out: (Script at specified location: scripts/npm-install.sh failed to complete in 300 seconds)
                === The logs are saying that node 4.4.5 is too old -_-
        - All these changed on my instances infrastructure makes me think about version control for it. Looking at using Ec2Audit as described in this article(http://offbytwo.com/2012/08/03/audit-ec2-infra-with-scm.html)

01/05/2019 Saturday 1:15 pm
  - Goal again for the fourth day is to get all my sites hosted on ec2 and then learn about either next JS or lambda, or about using my own hardware.
    - First thing is to update node using nvm install 8.9.0 (--reinstall-packages-from=4.4.5 didn't work)
    - Failed deployment with exit code 1 "react-scripts: command not found" 
    - I also notice that it is still using node 4.4.5 and I assume that's because of the all the linking commands I ran. I think this is causing the issue.  
      - Was going to run the linking commands again but instead just ran npm i -g npm and nvm install 8.9.0 in the root folder
      - Next I ran npm i -g react-scripts after running npm ls react showed that I didn't have react scripts installed. 
        - Now it doesn't show it still but when I run npm ls react-scripts it shows it... and npm start works now.
    - Next error was that I didn't have a browsers list in my package.json so I added it and pushed it and deployed it.
    - It keeps going back to node 4.4.5 when I run the deployment
      - aaaaaaand were doing a new instance. 
        - To see if I can do it from scratch without looking at my prior notes, here's how I think it goes:
          - 1. you link it to the code deploy in console v
          - 2. you link it to the load balancer x
          - 3. you get the keys for the putty connection x
          - 4. you install code deploy agent (I'm doing everything in the root folder this time, except for installing codedeploy) v
          - 5. You install nvm and npm v
          - 6. you deploy? yeah v
      - Now getting the npm: command not found error. Trying to do npm i -g npm instead of doing those links.
      - Npm still not found. 
      - Running the link commands again but this time with sudo ln -s /var/api/node_modules/.bin/react-scripts /usr/bin/react-scripts
        - sudo rm -r /usr/bin/node to remove it if you screw up the version like I just did
      - Running the deployment, and omfg react scripts worked!! But it launched the server to localhost:3000 and then it timed out after 60 seconds. Would like to just leave it there but literally I all I had to do today was link react scripts and guess what, it took 2 hours.

